{"version":3,"sources":["Components/Header/Header.js","Components/Search/SearchInput.js","Components/Search/SearchDropdown.js","Components/Search/Search.js","Components/Item/Item.js","Components/List/List.js","Components/Footer/Footer.js","Pages/Home.js","Pages/Details.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","id","onClick","document","body","classList","toggle","icon","faMoonDark","faMoonLignt","SearchInput","useState","value","setvalue","searchCountries","querySelectorAll","forEach","name","innerText","toLowerCase","includes","parentElement","style","display","type","placeholder","onChange","event","handleChangeValue","target","SearchDropdown","dropdownVisible","setDropdownVisible","filterCountries","region","faChevronDown","Search","Item","country","pathname","state","src","flag","alt","population","capital","List","countries","setcountries","loading","setLoading","useEffect","fetch","then","response","json","countriesList","catch","error","console","log","map","index","key","Footer","href","rel","Home","Details","location","useLocation","nativeName","subregion","topLevelDomain","currencies","currency","code","languages","language","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.74840d15.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMoon as faMoonDark } from \"@fortawesome/free-solid-svg-icons\";\nimport { faMoon as faMoonLignt } from \"@fortawesome/free-regular-svg-icons\";\nimport { Link } from \"react-router-dom\";\n\nconst Header = () => {\n  // Method to toggle dark mode\n  const toggleDarkMode = () => {\n    document.body.classList.toggle(\"dark\");\n  };\n\n  return (\n    <header>\n      <div className=\"container\">\n        <Link to=\"/Where-In-The-World\">\n          <h1>Where in the world</h1>\n        </Link>\n        <button\n          id=\"toggle\"\n          className=\"btn-toggle-dark-mode\"\n          onClick={toggleDarkMode}\n        >\n          <FontAwesomeIcon className=\"far fa-moon\" icon={faMoonDark} />\n          <FontAwesomeIcon className=\"fas fa-moon\" icon={faMoonLignt} />\n          Dark mode\n        </button>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useState } from \"react\";\n\nconst SearchInput = () => {\n  // State to manage the value of the input\n  const [value, setvalue] = useState(\"\");\n\n  // Method to set the value of the input\n  const handleChangeValue = value => {\n    setvalue(value);\n    searchCountries(value);\n  };\n\n  // Method to hide or show countries by his name\n  const searchCountries = value => {\n    const countryName = document.querySelectorAll(\".country-name\");\n    countryName.forEach(name => {\n      if (name.innerText.toLowerCase().includes(value.toLowerCase())) {\n        name.parentElement.parentElement.style.display = \"block\";\n      } else {\n        name.parentElement.parentElement.style.display = \"none\";\n      }\n    });\n  };\n\n  return (\n    <input\n      className=\"search\"\n      type=\"text\"\n      placeholder=\"Search for a country\"\n      value={value}\n      onChange={event => {\n        handleChangeValue(event.target.value);\n      }}\n    />\n  );\n};\n\nexport default SearchInput;\n","import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronDown } from \"@fortawesome/free-solid-svg-icons\";\n\nconst SearchDropdown = () => {\n  // State to manage the visibility of dropdown menu\n  const [dropdownVisible, setDropdownVisible] = useState(false);\n\n  // Method to toggle the dropdown\n  const toggleDropdown = () => {\n    setDropdownVisible(!dropdownVisible);\n  };\n\n  // Method to filter countries by region\n  const filterCountries = value => {\n    const regionName = document.querySelectorAll(\".country-region\");\n    regionName.forEach(region => {\n      if (region.innerText.includes(value) || value === \"All\") {\n        region.parentElement.parentElement.style.display = \"block\";\n      } else {\n        region.parentElement.parentElement.style.display = \"none\";\n      }\n    });\n  };\n\n  return (\n    <div className=\"dropdown\" onClick={toggleDropdown}>\n      Filter by region\n      <FontAwesomeIcon className=\"fas fa-chevron-down\" icon={faChevronDown} />\n      {dropdownVisible && (\n        <ul>\n          <li\n            onClick={event => {\n              filterCountries(event.target.innerText);\n            }}\n          >\n            All\n          </li>\n          <li\n            onClick={event => {\n              filterCountries(event.target.innerText);\n            }}\n          >\n            Africa\n          </li>\n          <li\n            onClick={event => {\n              filterCountries(event.target.innerText);\n            }}\n          >\n            America\n          </li>\n          <li\n            onClick={event => {\n              filterCountries(event.target.innerText);\n            }}\n          >\n            Asia\n          </li>\n          <li\n            onClick={event => {\n              filterCountries(event.target.innerText);\n            }}\n          >\n            Europe\n          </li>\n          <li\n            onClick={event => {\n              filterCountries(event.target.innerText);\n            }}\n          >\n            Oceania\n          </li>\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default SearchDropdown;\n","import React from \"react\";\nimport \"./Search.css\";\nimport SearchInput from \"./SearchInput\";\nimport SearchDropdown from \"./SearchDropdown\";\n\nconst Search = () => (\n  <section>\n    <div className=\"container\">\n      <SearchInput />\n      <SearchDropdown />\n    </div>\n  </section>\n);\n\nexport default Search;\n","import React from \"react\";\nimport \"./Item.css\";\nimport { Link } from \"react-router-dom\";\n\nconst Item = ({ country }) => (\n  <Link\n    to={{\n      pathname: \"/details\",\n      state: {\n        country: country\n      }\n    }}\n  >\n    <div className=\"country\">\n      <div>\n        <img src={country.flag} alt={country.name} />\n      </div>\n      <div className=\"country-infos\">\n        <h2 className=\"country-name\">{country.name}</h2>\n        <p>\n          <strong>Population: </strong>\n          {country.population}\n        </p>\n        <p className=\"country-region\">\n          <strong>Region: </strong>\n          {country.region}\n        </p>\n        <p>\n          <strong>Capital: </strong>\n          {country.capital}\n        </p>\n      </div>\n    </div>\n  </Link>\n);\n\nexport default Item;\n","import React, { useState, useEffect } from \"react\";\nimport Item from \"../Item/Item\";\nimport \"./List.css\";\n\nconst List = () => {\n  // State to store countries\n  const [countries, setcountries] = useState([]);\n\n  // State to mange the loading spinner\n  const [loading, setLoading] = useState(true);\n\n  // Effect to fetch countries from the API\n  useEffect(() => {\n    fetch(\"https://restcountries.eu/rest/v2/all\")\n      .then(response => response.json())\n      .then(countriesList => {\n        setcountries(countriesList);\n        setLoading(false);\n      })\n      .catch(error => console.log(error));\n  }, [loading]);\n\n  return loading ? (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  ) : (\n    <div className=\"container countries\">\n      {countries.map((country, index) => (\n        <Item country={country} key={index} />\n      ))}\n    </div>\n  );\n};\n\nexport default List;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <div>\n      <footer>\n        <ul>\n          <a\n            href=\"https://github.com/ricardo-ljr/Where-In-The-World\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Github Link\n          </a>\n        </ul>\n      </footer>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport Header from \"../Components/Header/Header\";\nimport Search from \"../Components/Search/Search\";\nimport List from \"../Components/List/List\";\nimport Footer from \"../Components/Footer/Footer\";\n\nconst Home = () => (\n  <>\n    <Header />\n    <Search />\n    <List />\n    <Footer />\n  </>\n);\n\nexport default Home;\n","import React from \"react\";\nimport Header from \"../Components/Header/Header\";\nimport { useLocation } from \"react-router-dom\";\nimport \"../Style/Details.css\";\n\nconst Details = () => {\n  const location = useLocation();\n\n  return (\n    <>\n      <Header />\n      <div className=\"detail\">\n        <div className=\"container\">\n          <img\n            src={location.state.country.flag}\n            alt={location.state.country.name}\n          />\n          <div className=\"detail-body\">\n            <h2>{location.state.country.name}</h2>\n            <p>\n              <strong>Native name: </strong>\n              {location.state.country.nativeName}\n            </p>\n            <p>\n              <strong>Population: </strong>\n              {location.state.country.population}\n            </p>\n            <p>\n              <strong>Region: </strong>\n              {location.state.country.region}\n            </p>\n            <p>\n              <strong>Sub region: </strong>\n              {location.state.country.subregion}\n            </p>\n            <p>\n              <strong>Capital: </strong>\n              {location.state.country.capital}\n            </p>\n            <p>\n              <strong>Top Level Domain: </strong>\n              {location.state.country.topLevelDomain[0]}\n            </p>\n            <p>\n              <strong>Currencies: </strong>\n              {location.state.country.currencies.map(currency => currency.code)}\n            </p>\n            <p>\n              <strong>Languages: </strong>\n              {location.state.country.languages.map(language => language.name)}\n            </p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Details;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"./Pages/Home\";\nimport Details from \"./Pages/Details\";\n\nconst App = () => (\n  <Router>\n    <Switch>\n      <Route exact path=\"/Where-In-The-World\" component={Home} />\n      <Route exact path=\"/details\" component={Details} />\n    </Switch>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}